I"!'<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"></script>

<p>
<!--

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

<style>
    .share-box a {
  display: inline-block;
  -webkit-box-shadow: 0 0 1px #777;
  box-shadow: 0 0 1px #777;
  padding: 5px 12px;
  margin-right: 5px;
  margin-bottom: 5px;
  text-decoration: none; }
  .share-box a:hover {
    text-decoration: none;
    -webkit-transition: background-color 200ms linear;
    -ms-transition: background-color 200ms linear;
    transition: background-color 200ms linear; }

.f {
  color: #3b5998; }
  .f:hover {
    color: #fff;
    background-color: #3b5998; }

.t {
  color: #4099FF; }
  .t:hover {
    color: #fff;
    background-color: #4099FF; }

.g {
  color: #d34836; }
  .g:hover {
    color: #fff;
    background-color: #d34836; }

.r {
  color: #ff5700; }
  .r:hover {
    color: #fff;
    background-color: #ff5700; }

.l {
  color: #0077b5; }
  .l:hover {
    color: #fff;
    background-color: #0077b5; }

.e {
  color: #444444; }
  .e:hover {
    color: #fff;
    background-color: #444444; }
</style>

<div class="share-box">
<a class="f" href="https://www.facebook.com/sharer/sharer.php?u=http://localhost:4000/blog/expression_units.html" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fab fa-facebook-f"></i></a>

<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/blog/expression_units.html" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fab fa-twitter"></i></a>

  <a class="g" href="https://plus.google.com/share?url=http://localhost:4000/blog/expression_units.html" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fab fa-google-plus-square"></i></a>


<a class="r" href="http://www.reddit.com/submit?url=http://localhost:4000/blog/expression_units.html" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=900,height=500,toolbar=1,resizable=0'); return false;" ><i class="fab fa-reddit"></i></a>

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&url=http://localhost:4000/blog/expression_units.html" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fab fa-linkedin-in"></i></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/blog/expression_units.html"><i class="fas fa-envelope-square"></i></a>
-->

  <!--
    <a href="https://twitter.com/renbedre?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-show-count="false">Follow @renbedre</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
-->

<!--
</div>

-->

</p>

<ul>
  <li>In RNA-seq gene expression data analysis, we come across various expression units such as RPM, RPKM, FPKM, TPM, TMM, and raw reads counts.</li>
  <li>Most of the times itâ€™s difficult to understand the basic underlying  methodology to calculate these units from mapped sequence data.</li>
  <li>I have seen a lot of posts of such normalization questions and their confusion among readers. Hence, I attempted here to explain these units
in a much simpler way (avoided complex mathematical expressions).</li>
</ul>

<h2 id="why-different-normalized-expression-units"><span style="color:#33a8ff">Why different normalized expression units?</span></h2>

<p>The expression units provide a digital measure of the abundance of transcripts. Normalized expression units are necessary to remove
technical biases in sequenced data such as depth of sequencing (more sequencing depth produces more read count for gene expressed at
same level) and gene length (differences in gene length generate unequal reads count for genes expressed at the same level; longer the
gene more the read count).</p>

<h2 id="-gene-expression-units-and-calculation-"><span style="color:#33a8ff"> Gene expression units and calculation </span></h2>

<h3 id="rpm-or-cpm-reads-per-million-mapped-reads-or-counts-per-million-mapped-reads-"><span style="color:#060606">RPM or CPM (Reads per million mapped reads or Counts per million mapped reads) </span></h3>

<p align="center">
  \(  \text{RPM or CPM} = \frac{ \text{Number of reads mapped to gene}  \times 10^6}{\text{Total number of mapped reads}}  \)
  </p>

<!--
 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;RPM&space;=&space;\frac{Number&space;\&space;of&space;\&space;reads&space;\&space;mapped&space;\&space;to&space;\&space;gene&space;\times&space;10^6}{Total&space;\&space;number&space;\&space;of&space;\&space;mapped&space;\&space;reads}" />
-->

<p>For example, You have sequenced one library with 5 million(M) reads. Among them, total 4 M matched to the genome sequence and 5000 reads matched to a given gene.</p>

<p align="center">
  \(  \text{RPM or CPM} = \frac{ 5000 \times 10^6}{4 \times 10^6} = 1250 \)
  </p>

<!--
 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;\large&space;RPM&space;=&space;\frac{5000&space;\times&space;10^6}{4&space;\times&space;10^6}&space;=&space;1250" />
-->

<p>Notes:</p>

<ul>
  <li>RPM does not consider the transcript length normalization.</li>
  <li>RPM Suitable for sequencing protocols where reads are generated irrespective of gene length</li>
</ul>

<p>RPM or CPM normalization using <a href="https://reneshbedre.github.io/blog/howtoinstall.html" target="_blank"><code class="language-plaintext highlighter-rouge">bioinfokit</code></a> (v0.9.1 or later),</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using interactive python interpreter (Python 3.7.4)
</span><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">bioinfokit.analys</span> <span class="kn">import</span> <span class="n">norm</span><span class="p">,</span> <span class="n">get_data</span>
<span class="c1"># load sugarcane RNA-seq expression dataset (Published in Bedre et al., 2019)
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">'sc_exp'</span><span class="p">).</span><span class="n">data</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
               <span class="n">gene</span>  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>  <span class="n">length</span>
<span class="mi">0</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>  <span class="mf">1982.0</span>
<span class="mi">1</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>  <span class="mf">4769.0</span>
<span class="mi">2</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>  <span class="mf">1096.0</span>
<span class="mi">3</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>  <span class="mf">3868.0</span>
<span class="mi">4</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>   <span class="mf">702.0</span>

<span class="c1"># as this data has gene length column, we will drop length column
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'length'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># make gene column as index column
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'gene'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>

<span class="c1"># now, normalize raw counts using CPM method 
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span> <span class="o">=</span> <span class="n">norm</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span><span class="p">.</span><span class="n">cpm</span><span class="p">(</span><span class="n">df</span><span class="o">=</span><span class="n">df</span><span class="p">)</span>
<span class="c1"># get CPM normalized dataframe
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">cpm_df</span> <span class="o">=</span> <span class="n">nm</span><span class="p">.</span><span class="n">cpm_norm</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">cpm_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                        <span class="n">ctr1</span>        <span class="n">ctr2</span>        <span class="n">ctr3</span>        <span class="n">trt1</span>        <span class="n">trt2</span>        <span class="n">trt3</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>  <span class="mf">100.695004</span>  <span class="mf">101.731189</span>   <span class="mf">74.721094</span>   <span class="mf">92.633828</span>   <span class="mf">74.270713</span>   <span class="mf">95.314714</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>   <span class="mf">14.597796</span>    <span class="mf">6.593688</span>   <span class="mf">16.098447</span>    <span class="mf">5.093269</span>    <span class="mf">5.882829</span>    <span class="mf">6.240844</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>   <span class="mf">11.618654</span>   <span class="mf">15.385272</span>    <span class="mf">9.112329</span>   <span class="mf">14.643148</span>   <span class="mf">19.119193</span>   <span class="mf">14.183737</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>  <span class="mf">157.894533</span>  <span class="mf">166.412129</span>  <span class="mf">151.568399</span>  <span class="mf">158.846324</span>  <span class="mf">141.923244</span>  <span class="mf">149.780266</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mf">3.574971</span>    <span class="mf">0.941955</span>    <span class="mf">1.214977</span>    <span class="mf">0.954988</span>    <span class="mf">3.676768</span>    <span class="mf">3.971446</span>
</code></pre></div></div>

<h3 id="rpkm-reads-per-kilo-base-per-million-mapped-reads"><span style="color:#060606">RPKM (Reads per kilo base per million mapped reads)</span></h3>

<p align="center">
  \(  \text{RPKM} = \frac{ \text{Number of reads mapped to gene}   \times 10^3  \times 10^6 }{\text{Total number of mapped reads} \times \text{gene length in bp }}  \)
  </p>

<!--
 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;RPKM&space;=&space;\frac{Number&space;\&space;of&space;\&space;reads&space;\&space;mapped&space;\&space;to&space;\&space;gene&space;\times&space;10^3&space;\times&space;10^6}{Total&space;\&space;number&space;\&space;of&space;\&space;mapped&space;\&space;reads&space;\times&space;gene&space;\&space;length&space;\&space;in&space;\&space;bp}" />
-->

<p>Here, \( 10^3 \) normalizes for gene length and 10^6 for sequencing depth factor.</p>

<p>FPKM (Fragments per kilo base per million mapped reads) is analogous to RPKM and used especially in paired-end RNA-seq experiments. In paired-end RNA-seq experiments,<br />
two (left and right) reads are sequenced from same DNA fragment. When we map paired-end data, both reads or only one read with high quality from a fragment can map to<br />
reference sequence. To avoid confusion or multiple counting, the fragments to which both or single read mapped is counted and represented for FPKM calculation.</p>

<p>For example, You have sequenced one library with 5 M reads. Among them, total 4 M matched to the genome sequence and 5000 reads matched to a given gene with a length of 2000 bp.</p>
<p align="center">
  \(  \text{RPKM} = \frac{ 5000 \times 10^3 \times 10^6}{4 \times 10^6 \times 2000} = 625 \)
     </p>

<!--
 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;RPKM&space;=&space;\frac{5000&space;\times&space;10^3&space;\times&space;10^6}{4&space;\times&space;10^6&space;\times&space;2000}&space;=&space;625" />
-->
<p>Notes:</p>

<ul>
  <li>RPKM considers the gene length for normalization</li>
  <li>RPKM is suitable for sequencing protocols where reads sequencing depends on gene length</li>
  <li>Used in single-end RNA-seq experiments (FPKM for paired-end RNA-seq data)</li>
  <li>RPKM/FPKM can be biased towards identifying the differentially expressed genes as the total normalized counts for 
each sample will be different (Bullard et al., 2010)</li>
</ul>

<p>RPKM or FPKM normalization using <a href="https://reneshbedre.github.io/blog/howtoinstall.html" target="_blank"><code class="language-plaintext highlighter-rouge">bioinfokit</code></a> (v0.9.1 or later),</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using interactive python interpreter (Python 3.7.4)
</span><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">bioinfokit.analys</span> <span class="kn">import</span> <span class="n">norm</span><span class="p">,</span> <span class="n">get_data</span>
<span class="c1"># load sugarcane RNA-seq expression dataset (Published in Bedre et al., 2019)
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">'sc_exp'</span><span class="p">).</span><span class="n">data</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
               <span class="n">gene</span>  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>  <span class="n">length</span>
<span class="mi">0</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>  <span class="mf">1982.0</span>
<span class="mi">1</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>  <span class="mf">4769.0</span>
<span class="mi">2</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>  <span class="mf">1096.0</span>
<span class="mi">3</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>  <span class="mf">3868.0</span>
<span class="mi">4</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>   <span class="mf">702.0</span>

<span class="c1"># make gene column as index column
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'gene'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>  <span class="n">length</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>  <span class="mf">1982.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>  <span class="mf">4769.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>  <span class="mf">1096.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>  <span class="mf">3868.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>   <span class="mf">702.0</span>

<span class="c1"># now, normalize raw counts using RPKM method
# gene length must be in bp
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span> <span class="o">=</span> <span class="n">norm</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span><span class="p">.</span><span class="n">rpkm</span><span class="p">(</span><span class="n">df</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">gl</span><span class="o">=</span><span class="s">'length'</span><span class="p">)</span>
<span class="c1"># get RPKM normalized dataframe
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">rpkm_df</span> <span class="o">=</span> <span class="n">nm</span><span class="p">.</span><span class="n">rpkm_norm</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rpkm_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                       <span class="n">ctr1</span>       <span class="n">ctr2</span>       <span class="n">ctr3</span>       <span class="n">trt1</span>       <span class="n">trt2</span>       <span class="n">trt3</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>  <span class="mf">50.804745</span>  <span class="mf">51.327542</span>  <span class="mf">37.699846</span>  <span class="mf">46.737552</span>  <span class="mf">37.472610</span>  <span class="mf">48.090169</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>   <span class="mf">3.060976</span>   <span class="mf">1.382614</span>   <span class="mf">3.375644</span>   <span class="mf">1.067995</span>   <span class="mf">1.233556</span>   <span class="mf">1.308627</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>  <span class="mf">10.600962</span>  <span class="mf">14.037657</span>   <span class="mf">8.314168</span>  <span class="mf">13.360537</span>  <span class="mf">17.444520</span>  <span class="mf">12.941366</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>  <span class="mf">40.820717</span>  <span class="mf">43.022784</span>  <span class="mf">39.185212</span>  <span class="mf">41.066785</span>  <span class="mf">36.691635</span>  <span class="mf">38.722923</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>   <span class="mf">5.092551</span>   <span class="mf">1.341817</span>   <span class="mf">1.730737</span>   <span class="mf">1.360382</span>   <span class="mf">5.237561</span>   <span class="mf">5.657331</span>
</code></pre></div></div>

<h3 id="tpm-transcript-per-million"><span style="color:#060606">TPM (Transcript per million)</span></h3>

<p align="center">
  \(  \text{TPM} = A \times \frac{1}{\sum(A)} \times 10^6 \)
    <br /><br />
    \(  \text{Where A} =  \frac{\text{total reads mapped to gene} \times 10^3}{\text{gene length in bp}} \)
  </p>

<!--
 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;TPM&space;=&space;\frac{Number&space;\&space;of&space;\&space;reads&space;\&space;mapped&space;\&space;to&space;\&space;gene&space;\times&space;read&space;\&space;length&space;\times&space;10^6}{Total&space;\&space;number&space;\&space;of&space;\&space;transcripts&space;\&space;sampled&space;\times&space;gene&space;\&space;length&space;\&space;in&space;\&space;bp}" />


Here, read length refers to the average number of nucleotides mapped to a gene.

For example, You have sequenced one library with 5M 100 bp reads. Among them, total 4M matched to the genome sequence and 5000 reads matched to a given gene  
with a length of 2000 bp. There were 10K transcripts were sampled from a genome sequence i.e. reads mapped to 10K genes. Suppose all 100 bp mapped from 5000 reads.

 <img src="https://latex.codecogs.com/gif.latex?\bg_green&space;TPM&space;=&space;\frac{5000&space;\times&space;100&space;\times&space;10^6}{10000&space;\times&space;2000}&space;=&space;25000" />
-->
<p>Notes:</p>

<ul>
  <li>TPM considers the gene length for normalization</li>
  <li>TPM proposed as an alternative to RPKM due to inaccuracy in RPKM measurement (Wagner et al., 2012)</li>
  <li>TPM is suitable for sequencing protocols where reads sequencing depends on gene length</li>
</ul>

<p>TPM normalization using <a href="https://reneshbedre.github.io/blog/howtoinstall.html" target="_blank"><code class="language-plaintext highlighter-rouge">bioinfokit</code></a> (v0.9.1 or later),</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using interactive python interpreter (Python 3.7.4)
</span><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">bioinfokit.analys</span> <span class="kn">import</span> <span class="n">norm</span><span class="p">,</span> <span class="n">get_data</span>
<span class="c1"># load sugarcane RNA-seq expression dataset (Published in Bedre et al., 2019)
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">get_data</span><span class="p">(</span><span class="s">'sc_exp'</span><span class="p">).</span><span class="n">data</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
               <span class="n">gene</span>  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>  <span class="n">length</span>
<span class="mi">0</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>  <span class="mf">1982.0</span>
<span class="mi">1</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>  <span class="mf">4769.0</span>
<span class="mi">2</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>  <span class="mf">1096.0</span>
<span class="mi">3</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>  <span class="mf">3868.0</span>
<span class="mi">4</span>  <span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>   <span class="mf">702.0</span>

<span class="c1"># make gene column as index column
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'gene'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                  <span class="n">ctr1</span>  <span class="n">ctr2</span>  <span class="n">ctr3</span>  <span class="n">trt1</span>  <span class="n">trt2</span>  <span class="n">trt3</span>  <span class="n">length</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>   <span class="mi">338</span>   <span class="mi">324</span>   <span class="mi">246</span>   <span class="mi">291</span>   <span class="mi">202</span>   <span class="mi">168</span>  <span class="mf">1982.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>    <span class="mi">49</span>    <span class="mi">21</span>    <span class="mi">53</span>    <span class="mi">16</span>    <span class="mi">16</span>    <span class="mi">11</span>  <span class="mf">4769.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>    <span class="mi">39</span>    <span class="mi">49</span>    <span class="mi">30</span>    <span class="mi">46</span>    <span class="mi">52</span>    <span class="mi">25</span>  <span class="mf">1096.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>   <span class="mi">530</span>   <span class="mi">530</span>   <span class="mi">499</span>   <span class="mi">499</span>   <span class="mi">386</span>   <span class="mi">264</span>  <span class="mf">3868.0</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>    <span class="mi">12</span>     <span class="mi">3</span>     <span class="mi">4</span>     <span class="mi">3</span>    <span class="mi">10</span>     <span class="mi">7</span>   <span class="mf">702.0</span>

<span class="c1"># now, normalize raw counts using TPM method
# gene length must be in bp
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span> <span class="o">=</span> <span class="n">norm</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nm</span><span class="p">.</span><span class="n">tpm</span><span class="p">(</span><span class="n">df</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">gl</span><span class="o">=</span><span class="s">'length'</span><span class="p">)</span>
<span class="c1"># get TPM normalized dataframe
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">tpm_df</span> <span class="o">=</span> <span class="n">nm</span><span class="p">.</span><span class="n">tpm_norm</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tpm_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
                       <span class="n">ctr1</span>       <span class="n">ctr2</span>       <span class="n">ctr3</span>       <span class="n">trt1</span>       <span class="n">trt2</span>       <span class="n">trt3</span>
<span class="n">gene</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000200</span>  <span class="mf">99.730156</span>  <span class="mf">97.641941</span>  <span class="mf">72.361658</span>  <span class="mf">89.606265</span>  <span class="mf">69.447237</span>  <span class="mf">90.643338</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000400</span>   <span class="mf">6.008723</span>   <span class="mf">2.630189</span>   <span class="mf">6.479263</span>   <span class="mf">2.047584</span>   <span class="mf">2.286125</span>   <span class="mf">2.466582</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000700</span>  <span class="mf">20.809781</span>  <span class="mf">26.704261</span>  <span class="mf">15.958341</span>  <span class="mf">25.615115</span>  <span class="mf">32.329578</span>  <span class="mf">24.392691</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G000800</span>  <span class="mf">80.131423</span>  <span class="mf">81.843548</span>  <span class="mf">75.212691</span>  <span class="mf">78.734145</span>  <span class="mf">67.999871</span>  <span class="mf">72.987371</span>
<span class="n">Sobic</span><span class="p">.</span><span class="mi">001</span><span class="n">G001000</span>   <span class="mf">9.996721</span>   <span class="mf">2.552579</span>   <span class="mf">3.322002</span>   <span class="mf">2.608154</span>   <span class="mf">9.706667</span>  <span class="mf">10.663289</span>
</code></pre></div></div>

<h3 id="tmm-trimmed-mean-of-m-values"><span style="color:#060606">TMM (Trimmed Mean of M-values)</span></h3>
<ul>
  <li>TMM is a between-sample normalization method in contrast to within-sample normalization methods (RPM, RPKM/FPKM, or TPM)</li>
  <li>TMM normalization method assumes that most of the genes are not differentially expressed</li>
  <li>TMM normalize the total RNA output among the samples and does not consider gene length or library size for normalization</li>
  <li>TMM considers sample RNA population and effective in normalization of samples with diverse RNA repertoires (e.g. samples from
different tissues). TMM will be good choice to remove the batch effects while comparing the samples from different tissues or genotypes or in cases
where RNA population would be significantly different among the samples.</li>
  <li>To calculate TMM,
    <ul>
      <li>get the library size normalized read count for each gene in each sample</li>
      <li>
        <p>calculate the log2 fold change between the two samples (M value)</p>

        <p align="center">
  <br />
      \(  \text{M} = log_2 \frac{\text{treated sample count}}{\text{control sample count}} \)
  </p>
      </li>
      <li>get absolute expression count (A value)
        <p align="center">
      <br />
    \(  \text{A} =  \frac{log_2(\text{treated sample count})+log_2(\text{control sample count})}{2} \)
    </p>
      </li>
      <li>Now, double trim the upper and lower percentages of the data (trim M values by 30% and A values by 5%)</li>
      <li>Get weighted mean of M after trimming and calculate normalization factor ( see Robinson et al., 2010 for details)</li>
    </ul>
  </li>
  <li>TMM is implemented in edgeR and performs better for between-samples comparisons</li>
  <li>edgeR does not consider gene length for normalization as it assumes that the gene length would be constant 
between the samples</li>
</ul>

<p>TMM normalization using edgeR,</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using R version 3.6.3 (2020-02-29) </span><span class="w">
</span><span class="c1"># load library</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">library</span><span class="p">(</span><span class="n">edgeR</span><span class="p">)</span><span class="w">
</span><span class="c1"># load sugarcane RNA-seq expression dataset (Published in Bedre et al., 2019)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://reneshbedre.github.io/assets/posts/gexp/df_sc.csv"</span><span class="p">,</span><span class="n">row.names</span><span class="o">=</span><span class="s2">"gene"</span><span class="p">)</span><span class="w">
</span><span class="c1"># delete last column (gene length column)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">x</span><span class="p">[,</span><span class="m">-7</span><span class="p">]</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
                </span><span class="n">ctr1</span><span class="w"> </span><span class="n">ctr2</span><span class="w"> </span><span class="n">ctr3</span><span class="w"> </span><span class="n">trt1</span><span class="w"> </span><span class="n">trt2</span><span class="w"> </span><span class="n">trt3</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w">  </span><span class="m">338</span><span class="w">  </span><span class="m">324</span><span class="w">  </span><span class="m">246</span><span class="w">  </span><span class="m">291</span><span class="w">  </span><span class="m">202</span><span class="w">  </span><span class="m">168</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">   </span><span class="m">49</span><span class="w">   </span><span class="m">21</span><span class="w">   </span><span class="m">53</span><span class="w">   </span><span class="m">16</span><span class="w">   </span><span class="m">16</span><span class="w">   </span><span class="m">11</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w">   </span><span class="m">39</span><span class="w">   </span><span class="m">49</span><span class="w">   </span><span class="m">30</span><span class="w">   </span><span class="m">46</span><span class="w">   </span><span class="m">52</span><span class="w">   </span><span class="m">25</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w">  </span><span class="m">530</span><span class="w">  </span><span class="m">530</span><span class="w">  </span><span class="m">499</span><span class="w">  </span><span class="m">499</span><span class="w">  </span><span class="m">386</span><span class="w">  </span><span class="m">264</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">   </span><span class="m">12</span><span class="w">    </span><span class="m">3</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">3</span><span class="w">   </span><span class="m">10</span><span class="w">    </span><span class="m">7</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">2</span><span class="w">    </span><span class="m">2</span><span class="w">    </span><span class="m">3</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">1</span><span class="w">
</span><span class="c1"># comparing groups</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'c'</span><span class="p">,</span><span class="s1">'c'</span><span class="p">,</span><span class="w"> </span><span class="s1">'c'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">))</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DGEList</span><span class="p">(</span><span class="n">counts</span><span class="o">=</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="o">=</span><span class="n">group</span><span class="p">)</span><span class="w">
</span><span class="c1"># normalize for library size by cacluating scaling factor using TMM (default method)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calcNormFactors</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="c1"># normalization factors for each library</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="o">$</span><span class="n">samples</span><span class="w">
     </span><span class="n">group</span><span class="w"> </span><span class="n">lib.size</span><span class="w"> </span><span class="n">norm.factors</span><span class="w">
</span><span class="n">ctr1</span><span class="w">     </span><span class="n">c</span><span class="w">  </span><span class="m">3357347</span><span class="w">    </span><span class="m">1.0290290</span><span class="w">
</span><span class="n">ctr2</span><span class="w">     </span><span class="n">c</span><span class="w">  </span><span class="m">3185467</span><span class="w">    </span><span class="m">0.9918449</span><span class="w">
</span><span class="n">ctr3</span><span class="w">     </span><span class="n">c</span><span class="w">  </span><span class="m">3292872</span><span class="w">    </span><span class="m">1.0479952</span><span class="w">
</span><span class="n">trt1</span><span class="w">     </span><span class="n">t</span><span class="w">  </span><span class="m">3141934</span><span class="w">    </span><span class="m">0.9651681</span><span class="w">
</span><span class="n">trt2</span><span class="w">     </span><span class="n">t</span><span class="w">  </span><span class="m">2720231</span><span class="w">    </span><span class="m">0.9819187</span><span class="w">
</span><span class="n">trt3</span><span class="w">     </span><span class="n">t</span><span class="w">  </span><span class="m">1762881</span><span class="w">    </span><span class="m">0.9864858</span><span class="w">

</span><span class="c1"># count per million read (normalized count)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">norm_counts</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cpm</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">norm_counts</span><span class="p">)</span><span class="w">    
                   </span><span class="n">ctr1</span><span class="w">        </span><span class="n">ctr2</span><span class="w">        </span><span class="n">ctr3</span><span class="w">        </span><span class="n">trt1</span><span class="w">       </span><span class="n">trt2</span><span class="w">        </span><span class="n">trt3</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w">  </span><span class="m">97.860339</span><span class="w"> </span><span class="m">102.5561297</span><span class="w">  </span><span class="m">71.3023988</span><span class="w">  </span><span class="m">95.9799323</span><span class="w">  </span><span class="m">75.634827</span><span class="w">  </span><span class="m">96.6223700</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">  </span><span class="m">14.186854</span><span class="w">   </span><span class="m">6.6471566</span><span class="w">  </span><span class="m">15.3618989</span><span class="w">   </span><span class="m">5.2772471</span><span class="w">   </span><span class="m">5.990877</span><span class="w">   </span><span class="m">6.3264647</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w">  </span><span class="m">11.291578</span><span class="w">  </span><span class="m">15.5100320</span><span class="w">   </span><span class="m">8.6954145</span><span class="w">  </span><span class="m">15.1720855</span><span class="w">  </span><span class="m">19.470352</span><span class="w">  </span><span class="m">14.3783289</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w"> </span><span class="m">153.449643</span><span class="w"> </span><span class="m">167.7615701</span><span class="w"> </span><span class="m">144.6337277</span><span class="w"> </span><span class="m">164.5841451</span><span class="w"> </span><span class="m">144.529917</span><span class="w"> </span><span class="m">151.8351528</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">   </span><span class="m">3.474332</span><span class="w">   </span><span class="m">0.9495938</span><span class="w">   </span><span class="m">1.1593886</span><span class="w">   </span><span class="m">0.9894838</span><span class="w">   </span><span class="m">3.744298</span><span class="w">   </span><span class="m">4.0259321</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">   </span><span class="m">1.158111</span><span class="w">   </span><span class="m">0.6330625</span><span class="w">   </span><span class="m">0.5796943</span><span class="w">   </span><span class="m">0.9894838</span><span class="w">   </span><span class="m">1.497719</span><span class="w">   </span><span class="m">0.5751332</span><span class="w">
</span></code></pre></div></div>

<h3 id="deseq-or-deseq2-normalization-median-of-ratios-method"><span style="color:#060606"><i>DESeq</i> or <i>DESeq2</i> normalization (median-of-ratios method)</span></h3>
<ul>
  <li>The <i>DESeq</i> (and also <i>DESeq2</i>) normalization method is proposed by Anders and Huber, 2010 and is similar to TMM</li>
  <li><i>DESeq</i> normalization method  also assumes that most of the genes are not differentially expressed</li>
  <li>The <i>DESeq</i> calculates size factors for each sample to compare the counts obtained from different samples with
different sequencing depth</li>
  <li><i>DESeq</i> normalization uses the median of the ratios of observed counts to calculate size factors. Briefly,
the size factor is calculated by first dividing the observed counts for each sample by its geometric mean. The size factor
is then calculated as the median of this ratio for each sample. This size factor then used for normalizing raw
count data for each sample.</li>
  <li><i>DESeq</i> or <i>DESeq2</i> does not consider gene length for normalization as it assumes that the gene length
would be constant between the samples.</li>
  <li><i>DESeq</i> or <i>DESeq2</i> performs better for between-samples comparisons</li>
</ul>

<p><i>DESeq2</i> normalization,</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using R version 4.0.2 (2020-06-22)</span><span class="w">
</span><span class="c1"># load library</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">library</span><span class="p">(</span><span class="n">DESeq2</span><span class="p">)</span><span class="w">
</span><span class="c1"># load sugarcane RNA-seq expression dataset and sample information table </span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://reneshbedre.github.io/assets/posts/gexp/df_sc.csv"</span><span class="p">,</span><span class="n">row.names</span><span class="o">=</span><span class="s2">"gene"</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">cond</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://reneshbedre.github.io/assets/posts/gexp/condition.csv"</span><span class="p">,</span><span class="n">row.names</span><span class="o">=</span><span class="s2">"sample"</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">cond</span><span class="o">$</span><span class="n">condition</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">cond</span><span class="o">$</span><span class="n">condition</span><span class="p">)</span><span class="w">
</span><span class="c1"># keep only required columns present in the sample information table</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">x</span><span class="p">[,</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">cond</span><span class="p">)]</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
                 </span><span class="n">ctr1</span><span class="w"> </span><span class="n">ctr2</span><span class="w"> </span><span class="n">ctr3</span><span class="w"> </span><span class="n">trt1</span><span class="w"> </span><span class="n">trt2</span><span class="w"> </span><span class="n">trt3</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w">  </span><span class="m">338</span><span class="w">  </span><span class="m">324</span><span class="w">  </span><span class="m">246</span><span class="w">  </span><span class="m">291</span><span class="w">  </span><span class="m">202</span><span class="w">  </span><span class="m">168</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">   </span><span class="m">49</span><span class="w">   </span><span class="m">21</span><span class="w">   </span><span class="m">53</span><span class="w">   </span><span class="m">16</span><span class="w">   </span><span class="m">16</span><span class="w">   </span><span class="m">11</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w">   </span><span class="m">39</span><span class="w">   </span><span class="m">49</span><span class="w">   </span><span class="m">30</span><span class="w">   </span><span class="m">46</span><span class="w">   </span><span class="m">52</span><span class="w">   </span><span class="m">25</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w">  </span><span class="m">530</span><span class="w">  </span><span class="m">530</span><span class="w">  </span><span class="m">499</span><span class="w">  </span><span class="m">499</span><span class="w">  </span><span class="m">386</span><span class="w">  </span><span class="m">264</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">   </span><span class="m">12</span><span class="w">    </span><span class="m">3</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">3</span><span class="w">   </span><span class="m">10</span><span class="w">    </span><span class="m">7</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">2</span><span class="w">    </span><span class="m">2</span><span class="w">    </span><span class="m">3</span><span class="w">    </span><span class="m">4</span><span class="w">    </span><span class="m">1</span><span class="w">

</span><span class="c1"># get dds</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">dds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DESeqDataSetFromMatrix</span><span class="p">(</span><span class="n">countData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">colData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cond</span><span class="p">,</span><span class="w"> </span><span class="n">design</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">condition</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">dds</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">estimateSizeFactors</span><span class="p">(</span><span class="n">dds</span><span class="p">)</span><span class="w">
</span><span class="c1"># DESeq2 normalization counts</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counts</span><span class="p">(</span><span class="n">dds</span><span class="p">,</span><span class="w"> </span><span class="n">normalized</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
                       </span><span class="n">ctr1</span><span class="w">       </span><span class="n">ctr2</span><span class="w">       </span><span class="n">ctr3</span><span class="w">       </span><span class="n">trt1</span><span class="w">       </span><span class="n">trt2</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w"> </span><span class="m">272.483741</span><span class="w"> </span><span class="m">290.412982</span><span class="w"> </span><span class="m">199.133348</span><span class="w"> </span><span class="m">272.915069</span><span class="w"> </span><span class="m">211.917896</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">  </span><span class="m">39.502081</span><span class="w">  </span><span class="m">18.823064</span><span class="w">  </span><span class="m">42.902713</span><span class="w">  </span><span class="m">15.005640</span><span class="w">  </span><span class="m">16.785576</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w">  </span><span class="m">31.440432</span><span class="w">  </span><span class="m">43.920482</span><span class="w">  </span><span class="m">24.284555</span><span class="w">  </span><span class="m">43.141214</span><span class="w">  </span><span class="m">54.553122</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w"> </span><span class="m">427.267404</span><span class="w"> </span><span class="m">475.058273</span><span class="w"> </span><span class="m">403.933092</span><span class="w"> </span><span class="m">467.988384</span><span class="w"> </span><span class="m">404.952020</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">   </span><span class="m">9.673979</span><span class="w">   </span><span class="m">2.689009</span><span class="w">   </span><span class="m">3.237941</span><span class="w">   </span><span class="m">2.813557</span><span class="w">  </span><span class="m">10.490985</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">   </span><span class="m">3.224660</span><span class="w">   </span><span class="m">1.792673</span><span class="w">   </span><span class="m">1.618970</span><span class="w">   </span><span class="m">2.813557</span><span class="w">   </span><span class="m">4.196394</span><span class="w">
                       </span><span class="n">trt3</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w"> </span><span class="m">271.037655</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">  </span><span class="m">17.746513</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w">  </span><span class="m">40.332984</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w"> </span><span class="m">425.916314</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">  </span><span class="m">11.293236</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">   </span><span class="m">1.613319</span><span class="w">

</span><span class="c1"># get size factors</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">sizeFactors</span><span class="p">(</span><span class="n">dds</span><span class="p">)</span><span class="w">
     </span><span class="n">ctr1</span><span class="w">      </span><span class="n">ctr2</span><span class="w">      </span><span class="n">ctr3</span><span class="w">      </span><span class="n">trt1</span><span class="w">      </span><span class="n">trt2</span><span class="w">      </span><span class="n">trt3</span><span class="w">
</span><span class="m">1.2404410</span><span class="w"> </span><span class="m">1.1156526</span><span class="w"> </span><span class="m">1.2353531</span><span class="w"> </span><span class="m">1.0662658</span><span class="w"> </span><span class="m">0.9531993</span><span class="w"> </span><span class="m">0.6198401</span><span class="w">

</span></code></pre></div></div>

<h3 id="scnorm-for-single-cell-rna-seq-scrna-seq"><span style="color:#060606">SCnorm for single cell RNA-seq (scRNA-seq)</span></h3>
<ul>
  <li>The normalization units explained above works best for bulk RNA-seq and could be biased for scRNA-seq due to
abundance of non-zero expression counts, variable count-depth relationship (dependence of gene expression on sequencing depth),
and other unwanted technical variations</li>
  <li>Bacher et al., 2017 proposed a SCnorm, a robust and accurate between-sample normalization unit for scRNA-seq</li>
  <li>Steps involved in SCnorm normalization;
    <ul>
      <li>SCnorm requires the raw expression counts (not-normalized), which can be obtained from RSEM or HTSeq</li>
      <li>Genes with low expression counts are filtered out (keep the genes with atleast 10 non-zero expression counts)</li>
      <li>estimate the count-depth relationship using quantile regression</li>
      <li>Cluster genes into groups with similar count-depth relationship</li>
      <li>A scale factor is calculated from each group and used for estimation for normalized expression</li>
    </ul>
  </li>
  <li><a href="https://bioconductor.org/packages/devel/bioc/html/SCnorm.html" target="_blank">SCnorm</a>
is implemented in R package and is available on Bioconductor</li>
</ul>

<h3 id="combat-seq-method"><span style="color:#060606">ComBat-Seq method</span></h3>
<ul>
  <li>Zhang et al., 2020 proposed a ComBat-Seq (batch  effect  adjustment  method) approach to addresses the large variance of
batch effects present in RNA-seq count data (the paper is still in preprint)</li>
  <li>The benefit of ComBat-Seq is that it adjusts the batch effects for raw counts data and provide the output
as integer counts in contrast to other normalization methods which can produce fraction count values as described above (e.g. RPKM, TPM, TMM)</li>
  <li>The resulting batch adjusted integer counts can be directly used with <i>DESeq2</i> which accepts only integer count data
for differential gene expression analysis</li>
  <li>ComBat-Seq takes input as a raw un-normalized data as input and addresses the batch effects using
a negative binomial regression model</li>
  <li>Briefly, ComBat-Seq adjust the count data by comparing the quantiles of the  empirical distributions of data to the
expected distribution without batch effects in the data</li>
  <li><a href="https://github.com/zhangyuqing/ComBat-seq" target="_blank">ComBat-Seq</a> is available in R</li>
</ul>

<h3 id="getmm-method"><span style="color:#060606">GeTMM method</span></h3>
<ul>
  <li>Smid et al., 2018 proposed a GeTMM (Gene length corrected TMM)  which works better for both between-samples and 
within-sample gene expression analysis</li>
  <li>GeTMM is based on the TMM normalization but allows the gene length correction which lacks in TMM and <i>DESeq</i> or 
<i>DESeq2</i></li>
  <li>In GeTMM, calculate RPK for each gene from raw read count data which is then corrected by TMM normalization factor and
scaled to per million reads (See Smid et al., 2018 for detailed calculation)</li>
</ul>

<p>GeTMM normalization using edgeR,</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using R version 3.6.3 (2020-02-29) </span><span class="w">
</span><span class="c1"># load library</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">library</span><span class="p">(</span><span class="n">edgeR</span><span class="p">)</span><span class="w">
</span><span class="c1"># load expression dataset (Published in Bedre et al., 2019)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"https://reneshbedre.github.io/assets/posts/gexp/df_sc.csv"</span><span class="p">,</span><span class="n">row.names</span><span class="o">=</span><span class="s2">"gene"</span><span class="p">)</span><span class="w">
</span><span class="c1"># calculate reads per Kbp of gene length (corrected for gene length)</span><span class="w">
</span><span class="c1"># gene length is in bp in exppression dataset and converted to Kbp</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">rpk</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="p">(</span><span class="n">x</span><span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">]</span><span class="o">*</span><span class="m">10</span><span class="o">^</span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="o">/</span><span class="n">x</span><span class="p">[,</span><span class="m">7</span><span class="p">])</span><span class="w">
</span><span class="c1"># comparing groups</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'c'</span><span class="p">,</span><span class="s1">'c'</span><span class="p">,</span><span class="w"> </span><span class="s1">'c'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">,</span><span class="w"> </span><span class="s1">'t'</span><span class="p">))</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DGEList</span><span class="p">(</span><span class="n">counts</span><span class="o">=</span><span class="n">rpk</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="o">=</span><span class="n">group</span><span class="p">)</span><span class="w">
</span><span class="c1"># normalize for library size by cacluating scaling factor using TMM (default method)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calcNormFactors</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="c1"># normalization factors for each library</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">y</span><span class="o">$</span><span class="n">samples</span><span class="w">
    </span><span class="n">group</span><span class="w">  </span><span class="n">lib.size</span><span class="w"> </span><span class="n">norm.factors</span><span class="w">
</span><span class="n">ctr1</span><span class="w">     </span><span class="n">c</span><span class="w"> </span><span class="m">1709962.4</span><span class="w">    </span><span class="m">1.0768821</span><span class="w">
</span><span class="n">ctr2</span><span class="w">     </span><span class="n">c</span><span class="w"> </span><span class="m">1674190.8</span><span class="w">    </span><span class="m">0.9843634</span><span class="w">
</span><span class="n">ctr3</span><span class="w">     </span><span class="n">c</span><span class="w"> </span><span class="m">1715232.3</span><span class="w">    </span><span class="m">1.0496310</span><span class="w">
</span><span class="n">trt1</span><span class="w">     </span><span class="n">t</span><span class="w"> </span><span class="m">1638517.0</span><span class="w">    </span><span class="m">0.9841989</span><span class="w">
</span><span class="n">trt2</span><span class="w">     </span><span class="n">t</span><span class="w"> </span><span class="m">1467549.5</span><span class="w">    </span><span class="m">0.9432728</span><span class="w">
</span><span class="n">trt3</span><span class="w">     </span><span class="n">t</span><span class="w">  </span><span class="m">935125.2</span><span class="w">    </span><span class="m">0.9680985</span><span class="w">

</span><span class="c1"># count per million read (normalized count)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">norm_counts</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cpm</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="o">&gt;</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">norm_counts</span><span class="p">)</span><span class="w">
                      </span><span class="n">ctr1</span><span class="w">      </span><span class="n">ctr2</span><span class="w">      </span><span class="n">ctr3</span><span class="w">      </span><span class="n">trt1</span><span class="w">      </span><span class="n">trt2</span><span class="w">      </span><span class="n">trt3</span><span class="w">
</span><span class="n">Sobic.001G000200</span><span class="w"> </span><span class="m">92.610097</span><span class="w"> </span><span class="m">99.192986</span><span class="w"> </span><span class="m">68.940090</span><span class="w"> </span><span class="m">91.044874</span><span class="w"> </span><span class="m">73.623702</span><span class="w"> </span><span class="m">93.630285</span><span class="w">
</span><span class="n">Sobic.001G000400</span><span class="w">  </span><span class="m">5.579741</span><span class="w">  </span><span class="m">2.671970</span><span class="w">  </span><span class="m">6.172896</span><span class="w">  </span><span class="m">2.080457</span><span class="w">  </span><span class="m">2.423609</span><span class="w">  </span><span class="m">2.547863</span><span class="w">
</span><span class="n">Sobic.001G000700</span><span class="w"> </span><span class="m">19.324103</span><span class="w"> </span><span class="m">27.128459</span><span class="w"> </span><span class="m">15.203763</span><span class="w"> </span><span class="m">26.026360</span><span class="w"> </span><span class="m">34.273836</span><span class="w"> </span><span class="m">25.196497</span><span class="w">
</span><span class="n">Sobic.001G000800</span><span class="w"> </span><span class="m">74.410581</span><span class="w"> </span><span class="m">83.143635</span><span class="w"> </span><span class="m">71.656315</span><span class="w"> </span><span class="m">79.998205</span><span class="w"> </span><span class="m">72.089293</span><span class="w"> </span><span class="m">75.392505</span><span class="w">
</span><span class="n">Sobic.001G001000</span><span class="w">  </span><span class="m">9.283023</span><span class="w">  </span><span class="m">2.593127</span><span class="w">  </span><span class="m">3.164924</span><span class="w">  </span><span class="m">2.650027</span><span class="w"> </span><span class="m">10.290413</span><span class="w"> </span><span class="m">11.014674</span><span class="w">
</span><span class="n">Sobic.001G001132</span><span class="w">  </span><span class="m">7.464699</span><span class="w">  </span><span class="m">4.170389</span><span class="w">  </span><span class="m">3.817485</span><span class="w">  </span><span class="m">6.392849</span><span class="w">  </span><span class="m">9.929718</span><span class="w">  </span><span class="m">3.795926</span><span class="w">
</span></code></pre></div></div>

<h2 id="references"><span style="color:#060606">References</span></h2>

<ul>
  <li>Mortazavi A, Williams BA, McCue K, Schaeffer L, Wold B. Mapping and quantifying mammalian transcriptomes by RNA-Seq. Nature methods. 2008 Jul 1;5(7):621-8.</li>
  <li>Wagner GP, Kin K, Lynch VJ. Measurement of mRNA abundance using RNA-seq data: RPKM measure is inconsistent among samples. Theory in biosciences. 2012 Dec 1;131(4):281-5.</li>
  <li>Bullard JH, Purdom E, Hansen KD, Dudoit S. Evaluation of statistical methods for normalization and differential expression in mRNA-Seq experiments. BMC bioinformatics. 2010 Dec;11(1):94.</li>
  <li>Robinson MD, Oshlack A. A scaling normalization method for differential expression analysis of RNA-seq data. Genome biology. 2010 Mar;11(3):R25.</li>
  <li>Anders S, Huber W. Differential expression analysis for sequence count data. Nature Precedings. 2010 Apr 30:1-.</li>
  <li>Love MI, Huber W, Anders S. Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome biology. 2014 Dec 1;15(12):550.</li>
  <li>Bacher R, Chu LF, Leng N, Gasch AP, Thomson JA, Stewart RM, Newton M, Kendziorski C. SCnorm: robust normalization of single-cell RNA-seq data. Nature methods. 2017 Jun;14(6):584.</li>
  <li>Zhang, Y., Parmigiani, G., &amp; Johnson, W. E. (2020). ComBat-Seq: batch effect adjustment for RNA-Seq count data. bioRxiv, 904730.</li>
  <li>Smid M, van den Braak RR, van de Werken HJ, van Riet J, van Galen A, de Weerd V, van der Vlugt-Daane M, Bril SI, Lalmahomed ZS, Kloosterman WP, Wilting SM. Gene length corrected trimmed mean of M-values (GeTMM) processing of RNA-seq data performs similarly in intersample analyses while improving intrasample comparisons. BMC bioinformatics. 2018 Dec;19(1):1-3.</li>
  <li>Bedre R, Irigoyen S, Schaker PD, Monteiro-Vitorello CB, Da Silva JA, Mandadi KK. Genome-wide alternative splicing landscapes modulated by biotrophic sugarcane smut pathogen. Scientific reports. 2019 Jun 20;9(1):1-2.</li>
  <li>Robinson MD, McCarthy DJ, Smyth GK. edgeR: a Bioconductor package for differential expression analysis of digital gene expression data. Bioinformatics. 2010 Jan 1;26(1):139-40.</li>
</ul>

<!--

**<span style="color:#33a8ff">How to cite?</span>**

Bedre, R.  (2017, May 05) .Gene expression units explained: RPM, RPKM, FPKM, TPM, <i>DESeq</i>, TMM, SCnorm, and ComBat-Seq. 
https://reneshbedre.github.io/blog/expression_units.html
-->

<p><span style="color:#9e9696">If you have any questions, comments or recommendations, please email me at 
<b>reneshbe@gmail.com</b></span></p>

<p><span style="color:#9e9696"><i> Last updated: August 19, 2020</i> </span></p>

<p>
<!-- Begin Mailchimp Signup Form -->
<!--
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<style type="text/css">
	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
	/* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.
	   We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<div id="mc_embed_signup">
<form action="https://github.us10.list-manage.com/subscribe/post?u=1c0202ed60d33515742eec50a&amp;id=b17e2351b6" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
	<label for="mce-EMAIL">Subscribe for new articles</label>
	<input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
-->
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
<!--
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_1c0202ed60d33515742eec50a_b17e2351b6" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>
-->
<!--End mc_embed_signup-->
</p>

<p>
<a rel="license" href="http://creativecommons.org/licenses/by/4.0/" target="_blank"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/" target="_blank">Creative Commons Attribution 4.0 International License</a>.
</p>
:ET